import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

from services import kanye_quote, get_weather
from states import Survey
from keyboards import reply_kb, inline_kb
from db import Database

load_dotenv()

bot_token = os.getenv("TOKEN")
bot = Bot(token=bot_token)
db = Database(
    user=os.getenv("DB_USER"),
    password=os.getenv("DB_PASSWORD"),
    host=os.getenv("DB_HOST"),
    database=os.getenv("DB_NAME")
)

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message):
    user = await db.check_user(message.from_user.id)
    if not user:
        await db.add_user(
            message.from_user.id,
            message.from_user.username,
            message.from_user.first_name,
            message.from_user.last_name
        )
        await message.answer(f"Hello {message.from_user.first_name}, –¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö")
    else:
        await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º {message.from_user.username}")


@router.message(Command("help"))
async def cmd_help(message: Message):
    commands = "\n".join([
        "/start - –ù–∞—á–∞—Ç—å",
        "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
        "/quiz - –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É",
        "/survey - –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å",
        "/inet - –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏"
    ])
    await message.answer(f"<i>–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!</i>\n{commands}", parse_mode="HTML")


@router.message(Command("inet"))
async def cmd_inet(message: Message):
    await message.answer("–í–æ—Ç —Å—Å—ã–ª–∫–∏:", reply_markup=inline_kb)



@router.message(Command("survey"))
async def cmd_survey(message: Message, state: FSMContext):
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await state.set_state(Survey.name)


@router.message(Survey.name, F.text)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    await state.set_state(Survey.age)


@router.message(Survey.age, F.text)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer("–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç?")
    await state.set_state(Survey.color)


@router.message(Survey.color, F.text)
async def process_color(message: Message, state: FSMContext):
    data = await state.get_data()
    name = data.get("name")
    age = data.get("age")
    color = message.text
    answer_text = (
        f"–û—Ç–ª–∏—á–Ω–æ!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –æ–ø—Ä–æ—Å!\n"
        f"–í–∞—à –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç: {color}\n"
        f"–í–∞–º: {age} –ª–µ—Ç\n"
        f"–í–∞—Å –∑–æ–≤—É—Ç: {name}"
    )
    await message.answer(answer_text)

    user = await db.check_user(message.from_user.id)
    await db.add_survey(user["id"], age, color)
    await state.clear()



@router.message(F.text)
async def reply_text(message: Message):
    if message.text.lower() == "hi":
        await message.reply("–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç")
    elif message.text == "KB":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_kb)
    elif len(message.text) > 20:
        await message.reply("–£ —Ç–µ–±—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
    else:
        await message.reply(f"You typed: {message.text}")


@router.message(F.photo)
async def reply_image(message: Message):
    await message.answer("Nice picture! üëç")


@router.callback_query(F.data == "quote")
async def callback_quote(call: CallbackQuery):
    quote = await kanye_quote()
    await call.message.answer(quote)
    await call.answer()


@router.callback_query(F.data == "weather")
async def callback_weather(call: CallbackQuery):
    weather = await get_weather()
    await call.message.answer(weather)
    await call.answer()



questions = [
    {"question": "–ö–∞–∫–∏–µ —Ü–≤–µ—Ç–∞ —É —Ñ–ª–∞–≥–∞ –†–æ—Å—Å–∏–∏?", "options": ["‚¨úüü¶‚¨ú", "‚¨õüü®‚¨ú", "‚¨úüü¶üü•", "üü®üü•üü•"], "correct": "‚¨úüü¶üü•"},
    {"question": "–ö–∞–∫–∞—è –∞—Ä–º–∏—è —Å–∞–º–∞—è —Å–∏–ª—å–Ω–∞—è –≤–æ –≤—Å—ë–º –º–∏—Ä–µ?", "options": ["–°–®–ê", "–ö–∏—Ç–∞–π", "–†–æ—Å—Å–∏—è", "–°–µ–≤–µ—Ä–Ω–∞—è –ö–æ—Ä–µ—è"], "correct": "–∞—Ä–º–∏—è –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏(–í–°–†–§)"},
    {"question": "–ö–∞–∫–∞—è —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è —Å—Ç—Ä–∞–Ω–∞ –≤ –º–∏—Ä–µ?", "options": ["–ë—Ä–∞–∑–∏–ª–∏—è", "–†–æ—Å—Å–∏—è", "–ö–∞–Ω–∞–¥–∞", "–°–®–ê"], "correct": "–†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è"},
    {"question": "–ö–∞–∫ –∑–æ–≤—É—Ç –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –ú–∏—Ä–∞?", "options": ["–ë–∞–π–¥–µ–Ω", "–°–∏ –¶–∑–∏–Ω—å–ø–∏–Ω", "–ü—É—Ç–∏–Ω", "–¢—Ä–∞–º–ø"], "correct": "–í–ª–∞–¥–∏–º–∏—Ä –ü—É—Ç–∏–Ω"},
    {"question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–∞ –ú–∏—Ä–∞?", "options": ["–ë–µ—Ä–ª–∏–Ω", "–õ–æ–Ω–¥–æ–Ω", "–ú–æ—Å–∫–≤–∞", "–ù—å—é-–ô–æ—Ä–∫"], "correct": "–ú–æ—Å–∫–≤–∞"}
]

user_scores = {}


@router.message(Command("quiz"))
async def start_quiz(message: Message):
    user_scores[message.from_user.id] = 0
    await send_question(message.from_user.id, 0)


async def send_question(user_id: int, q_index: int):
    if q_index >= len(questions):
        score = user_scores.get(user_id, 0)
        await bot.send_message(user_id, f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(questions)}")
        return

    question = questions[q_index]
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=option, callback_data=f"quiz_{q_index}_{option}")]
            for option in question["options"]
        ]
    )
    await bot.send_message(user_id, question["question"], reply_markup=keyboard)


@router.callback_query(F.data.startswith("quiz_"))
async def handle_answer(callback: CallbackQuery):
    user_id = callback.from_user.id
    _, q_index, answer = callback.data.split("_", 2)
    q_index = int(q_index)

    correct_answer = questions[q_index]["correct"]
    if answer == correct_answer:
        user_scores[user_id] += 1
        await callback.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        await callback.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

    await send_question(user_id, q_index + 1)



async def main():
    logging.basicConfig(level=logging.INFO)
    print("Starting bot...")
    await db.connect()
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    try:
        await dp.start_polling(bot)
    finally:
        await db.disconnect()


if __name__ == "__main__":
    asyncio.run(main())
